version: '3'

services:
  ${DEVELOPMENT_CONTAINER_SERVICE_NAME}:
    build:
      context: ${development_container_context_path}
      dockerfile: Dockerfile

    volumes:
      # Forwards the local Docker socket to the container.
      - /var/run/docker.sock:/var/run/docker-host.sock
      # Update this to wherever you want VS Code to mount the folder of your project
      - ..:${DEVELOPMENT_CONTAINER_WORKING_DIRECTORY}:cached
      # Avoid and share extensions to named volume.
      - ${vscode_extension_volume_name}:${vscode_extension_path}
      - ${vscode_insider_extension_volume_name}:${vscode_insider_extension_path}

    # Overrides default command so things don't shut down after the process ends.
    entrypoint: /usr/local/share/docker-init.sh
    command: sleep infinity

    # Uncomment the next four lines if you will use a ptrace-based debuggers like C++, Go, and Rust.
    # cap_add:
    #  - SYS_PTRACE
    # security_opt:
    #   - seccomp:unconfined

    # Uncomment the next line to use a non-root user for all processes.
    user: ${DEVELOPMENT_CONTAINER_USERNAME}

    # Use "forwardPorts" in **devcontainer.json** to forward an app port locally.
    # (Adding the "ports" property to this file will not forward from a Codespace.)

  ${RUNTIME_CONTAINER_SERVICE_NAME}:
    build:
      context: ${runtime_container_context_path}
      dockerfile: Dockerfile
      args:
        - RUNTIME_BASE_IMAGE=${runtime_base_image_name}
        - USERNAME=${DEVELOPMENT_CONTAINER_USERNAME}
    restart: always
    working_dir: ${RUNTIME_CONTAINER_WORKING_DIRECTORY}
    tty: true
    volumes:
      - ${local_container_working_directory}:${RUNTIME_CONTAINER_WORKING_DIRECTORY}
      - ${vscode_extension_volume_name}:${vscode_extension_path}
      - ${vscode_insider_extension_volume_name}:${vscode_insider_extension_path}
    user: ${DEVELOPMENT_CONTAINER_USERNAME}

volumes:
  ${vscode_extension_volume_name}:
  ${vscode_insider_extension_volume_name}:
